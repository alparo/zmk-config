#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

#include "keypos_44keys.h"

#define DEF 0
#define NUM 1
#define NAV 2
#define HK 3
#define ADJ 4

/* Settings */

#define QUICK_TAP_MS 175

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;              // repeat on tap-into-hold
    hold-trigger-key-positions = <0>;  // tap on interrupt
};

// colon sign
//ZMK_UNICODE_SINGLE(colon, N0, N0, N5, N8)  // :


/*  ╭─────────────────────────┬─────────────────────────╮
 ╭──╯ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 ╰──╮
 │LT6 LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 RT6│
 ╰──╮ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 ╭──╯
    ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
                ╰─────────────┴─────────────╯             */
// use global-quick-tap-ms for combos (requires PR 1387)
#undef COMBO_HOOK
#define COMBO_HOOK global-quick-tap-ms = <75>;

#define COMBO_TERM_FAST 20
#define COMBO_TERM_SLOW 35

ZMK_COMBO(caps_word, &caps_word, LM1 RM1, ALL, COMBO_TERM_SLOW)

ZMK_COMBO(combo_cut,   &kp LS(DEL),   LB3 LB1,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(combo_copy,  &kp LC(INS),   LB3 LB2,     DEF NAV NUM, COMBO_TERM_FAST)
ZMK_COMBO(combo_paste, &kp LS(INS),   LB2 LB1,     DEF NAV NUM, COMBO_TERM_FAST)


// TAP DANCE
// tap: num-word | double-tap: sticky num-layer | hold: num-layer
ZMK_BEHAVIOR(td_ply_nxt, tap_dance,
    tapping-term-ms = <280>;
    bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
)
ZMK_BEHAVIOR(td_mns_sls, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp KP_MINUS>, <&kp KP_SLASH>;
)
ZMK_BEHAVIOR(td_pls_ast, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp KP_PLUS>, <&kp KP_ASTERISK>;
)

//MOD MORPH
ZMK_BEHAVIOR(gresc, mod_morph,
    bindings = <&kp ESC>, <&kp GRAVE>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    keep-mods = <(MOD_LSFT|MOD_RSFT)>;
)

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LT6 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RT6 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

ZMK_BEHAVIOR(hml, hold_tap,  // left-hand HRMs
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    global-quick-tap-ms = <150>;        // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;            // requires PR #1423
)

ZMK_BEHAVIOR(hmr, hold_tap,  // right-hand HRMs
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    global-quick-tap-ms = <150>;        // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;            // requires PR #1423
)


// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ZMK_LAYER(default,
// ╭─────┬─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────┬─────╮
// │ GUI │ESC~ │  Q  │  W  │  E  │  R  │  T  │   │  Y  │  U  │  I  │  O  │  P  │  [  │  ]  │
// ╰─────│ACTAB│GUI/A│ALT/S│SFT/D│CTR/F│  G  │   │  H  │CTR/J│SFT/K│ALT/L│GUI/;│  '  │─────╯
//       |  -  │  Z  │  X  │  C  │  V  │  B  │   │  N  │  M  │  ,  │  .  │  /  │  \  │
//       ╰───────────│HK/TAB│NAV/SPC│NUM/SPC│   │NUM/ENT│NAV/BKSP│HK/DEL│───────────╯
//                   ╰───────────────────────╯   ╰───────────────────────╯
   &kp LWIN &gresc      &kp Q &kp W &kp E &kp R &kp T &kp Y             &kp U  &kp I        &kp O   &kp P    &kp LBKT   &kp RBKT
        	&kp LA(LC(TAB)) &hrm LGUI A &hrm LALT S &hrm LSHIFT D &hrm LCTRL F &kp G &kp H &hrm RCTRL J &hrm RSHIFT K &hrm RALT L &hrm RGUI SEMI &kp SQT
            &kp MINUS 	&kp Z &kp X &kp C &kp V &kp B &kp N             &kp M  &kp COMMA    &kp DOT &kp FSLH &kp BSLH
                        &lt HK TAB  &lt NAV SPACE &lt NUM SPACE 	&lt NUM ENTER &lt NAV BSPC &lt HK DEL
)
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ZMK_LAYER(numbers,
// -----------------------------------------------------------------------------------------
// |     |     |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//       |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
//       |     |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
//                    |TRANS|TRANS|TRANS|   |TRANS|TRANS|TRANS|
   &none  &none	&kp F1   &kp F2 &kp F3      &kp F4      &kp F5      &kp F6      &kp F7   &kp F8   &kp F9   &kp F10  &kp F11 &kp F12 
          &kp EQUAL &kp EXCL &kp AT &kp HASH    &kp DLLR    &kp PRCNT 	&kp CARET   &kp AMPS &kp STAR &kp LPAR &kp RPAR &kp MINUS
          &none &kp N1   &kp N2 &kp N3      &kp N4      &kp N5      &kp N6      &kp N7   &kp N8   &kp N9   &kp N0   &none
                                            &trans &trans &trans   	&trans &trans &kp LS(INS)
)
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ZMK_LAYER(navigation,
// -----------------------------------------------------------------------------------------
// |     |      |  =  |  7  |  8  |  9  | -// |   | HOME| PGDN| PGUP| END |     | VOLU |     |
//       |  ENT |  :  |  4  |  5  |  6  | +/* |   | LEFT| DOWN|  UP | RGHT|     | PLAY |
//       | CALC |  .  |  1  |  2  |  3  |  0  |   |C+LEFT|C+PGDN|C+PGUP|C+RGHT| | VOLD |
//                          |     |     | ADJ |   | ADJ |     |     |
   &none 	&none           &kp KP_EQUAL &kp N7 &kp N8 &kp N9 &td_mns_sls          &kp HOME    &kp PG_DN   	&kp PG_UP   &kp END   		&none  &kp C_VOL_UP &trans
          	&kp KP_ENTER 	&colon	    &kp N4 &kp N5 &kp N6 &td_pls_ast     	    &kp LEFT 	&kp DOWN 		&kp UP 		&kp RIGHT 		&none &td_ply_nxt
          	&kp C_AL_CALC   &kp KP_DOT 	&kp N1 &kp N2 &kp N3 &kp N0     &kp LC(LEFT) &kp LC(PG_DN) 	&kp LC(PG_UP) &kp LC(RIGHT) &none &kp C_VOL_DN
                                                           &trans &trans &trans   	&trans &trans &trans
)
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ZMK_LAYER(hotkeys
   &trans &trans    &kp LG(N1)      &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)      &kp LG(N6) &kp LG(N7) &kp LG(N8) &kp LG(N9) &kp LG(N0)  &none &trans
          &trans    &kp LC(A)       &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp LG(V)       &trans &trans &none &none &none &trans
          &trans    &none           &none       &none   &none  &none           	        &trans &trans &trans &trans &trans &trans
                                                &mo ADJ &trans &trans   		        &trans &trans &mo ADJ
)
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ZMK_LAYER(adjust,
// -----------------------------------------------------------------------------------------
// | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
//       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
//       |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                          |     |     |     |   |     |     |     |
   &reset &bootloader &none        &none        &none        &none        &none         &none        &none        &none        &none        &none         &bootloader &reset
          &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
          &none       &none        &none        &none        &none        &none         &none        &none        &none        &none        &none         &none
                                                            &trans &none &trans         &trans &none &trans
)
